#pragma once
#define AD_damage                       100            //AD伤害
#define AP_damage                       101            //AP伤害
#define REAL_damage                     102            //真实伤害

#define Occupation_CIKE                 1001           //职业-刺客
#define Occupation_YOUXIA               1002           //职业-游侠
#define Occupation_DOUSHI               1003           //职业-斗士
#define Occupation_ZHENGFUZHE           1004           //职业-征服者
#define Occupation_FUSUZHE              1005           //职业-复苏者
#define Occupation_SHENYUZHE            1006           //职业-神谕者
#define Occupation_QISHI                1007           //职业-骑士
#define Occupation_FASHI                1008           //职业-法师
#define Occupation_SHENDUNZHANSHI       1009           //职业-神盾战士
#define Occupation_MISHUSHI             1010           //职业-秘术师
#define Occupation_ZHONGQIBING          1011           //职业-重骑兵
#define Occupation_DAMOWANG             1012           //职业-大魔王
#define Occupation_SHENWANG             1013           //职业-神王
#define Occupation_XUNLONGDASHI         1014           //职业-驯龙大师

#define Feature_POBAI                   2001           //特质-破败军团
#define Feature_HEIYE                   2002           //特质-黑夜使者
#define Feature_MONV                    2003           //特质-魔女
#define Feature_XIAOEMO                 2004           //特质-小恶魔
#define Feature_TULONG                  2005           //特质-屠龙勇士
#define Feature_SANGSHI                 2006           //特质-丧尸
#define Feature_SHENGGUANGWEISHI        2007           //特质-圣光卫士
#define Feature_LIMING                  2008           //特质-黎明使者
#define Feature_SHENYOUZHISEN           2009           //特质-神佑之森
#define Feature_LONGZU                  2010           //特质-龙族
#define Feature_TIEJIAWEISHI            2011           //特质-铁甲卫士
#define Feature_YONGLIESHUANGZI         2012           //特质-永猎双子
#define Feature_FUSHENGWANGHUN          2013           //特质-复生亡魂

#define Debuff_None                    3000           //无Debuff
#define Debuff_stun                    3001           //Debuff-眩晕
#define Debuff_slow                    3002           //Debuff-减速
#define Debuff_knockup                 3003           //Debuff-击飞
#define Debuff_root                    3004           //Debuff-定身
#define Debuff_blind                   3005           //Debuff-致盲
#define Debuff_taunt                   3006           //Debuff-嘲讽
#define Debuff_silence                 3007           //Debuff-沉默
#define Debuff_srslinjured             3008           //Debuff-重伤
#define Debuff_lowerAD                 3009           //Debuff-降低攻击力
#define Debuff_calmdown                3010           //Debuff-平静
#define Debuff_lowerMR                 3011           //Debuff-降低魔抗

#define Buff_None                      4000           //无buff
#define Buff_shield                    4001           //Buff-护盾

#define HERO_Fulajimier                8001      //弗拉基米尔
#define HERO_Wolike                    8002      //沃里克
#define HERO_VN                        8003      //薇恩
#define HERO_Bobi                      8004      //波比
#define HERO_UD                        8005      //乌迪尔
#define HERO_Gulajiasi                 8006      //古拉加斯
#define HERO_Leiouna                   8007      //雷欧娜
#define HERO_Giggs                     8008      //吉格斯
#define HERO_Kazike                    8009      //卡兹克
#define HERO_Lisangzhuo                8010      //丽桑卓
#define HERO_Kelie                     8011      //克烈
#define HERO_Yatuokesi                 8012      //阿托克斯
#define HERO_Kalisita                  8013      //卡莉斯塔
#define HERO_Lefulan                   8014      //乐芙兰
#define HERO_Suolaka                   8015      //索拉卡
#define HERO_Telangdeer                8016      //特朗德尔
#define HERO_Bulande                   8017      //布兰德
#define HERO_Kainan                    8018      //凯南
#define HERO_Weilusi                   8019      //维鲁斯
#define HERO_Nuotilesi                 8020      //诺提勒斯
#define HERO_Weiketuo                  8021      //维克托
#define HERO_Zhuangseni                8022      //庄瑟妮
#define HERO_Hekalimu                  8023      //赫卡里姆
#define HERO_Xindela                   8024      //辛德拉
#define HERO_Chuishi                   8025      //锤石
#define HERO_Seti                      8026      //瑟提
#define HERO_Nunu                      8027      //努努
#define HERO_Ashe                      8028      //艾希
#define HERO_Moganna                   8029      //莫甘娜
#define HERO_Katelinna                 8030      //卡特琳娜
#define HERO_NOC                       8031      //魔腾
#define HERO_Lee                       8032      //李青
#define HERO_Naideli                   8033      //奈德丽
#define HERO_Pansen                    8034      //潘森
#define HERO_Ruiwen                    8035      //锐雯
#define HERO_Lux                       8036      //拉克丝
#define HERO_Lulu                      8037      //露露
#define HERO_Jiela                     8038      //婕拉
#define HERO_Yasuo                     8039      //亚索


#define 定位器等地区都去5    88888

#include "AppDelegate.h"
#include <string>
#include <vector>
#include <map>
#include <Windows.h>
#include <cstdlib>
#include <iostream>
#include "tools.h"
using namespace cocos2d;
using namespace std;

class Hero;
//技能父类
struct skill
{
	void InitSkill(int ad,int ap,int real,int regrn,int dbf,double dbfe, int bf,double bfe);
	//void getHero(Hero* h);
	//Hero* that;
	int damageAD;
	int damageAP;
	int damageREAL;
	int Regen;
	int Debuff;
	double DebuffEffect;
	int Buff;
	double BuffEffect;
	std::string describe;
};

//英雄父类
class Hero :public Node
{
public:
	Hero();//初始化时输入英雄星级以方便初始化英雄各项属性
	~Hero();
	void bindSprite(Sprite* sprite);
	Sprite* getSprite();//获取当前英雄的Sprite
    Hero* create(Sprite* sprite);
	bool init(Sprite* sprite);

	/*给定英雄ID，从配置文件中读取英雄数据*/
	static Hero* createFromCsvFileByID(int HeroID,int level);
	bool initFromCsvFileByID(int iHeroID,int level);

	Hero* TargetCapture();                          //目标捕获
	int CmnATKDamage(Hero* target);                 //普通攻击造成伤害
	void CmnAtkMANA();                              //普通攻击回蓝
	//int SkillATKDamage(Hero* target);               //技能攻击造成伤害
	void hurtMe(int iDamage, int dmgType);          //受到攻击
	bool isDead();                                  //获得isDead值
	//不一定为虚函数
	void onDead();                                  //死亡效果
	void onHurt(int iHurtValue,int mana);           //受到攻击效果 
	virtual void Skill();                           //技能效果
	virtual void CmnATK_effect();                   //普通攻击
	void upgrade();                                 //升级
	void GoOnStage();                               //英雄上场
	void OutOfStage();                              //英雄下场
	void wearEqpmt(void (*a)(Hero*));               //
protected:
	virtual void UseSkill();                        //使用技能
	virtual void onBindSprite();                    //绑定精灵对象
	Hero* Target;                                   //英雄目标（capture函数获取）
	Vector<int> h_occupation, h_feature;            //英雄职业，特性
	Sprite* h_sprite;                               //英雄图片
	skill h_Skill;                                  //英雄技能
	CC_SYNTHESIZE(Hero*, Target, fTarget);          //目标    
	CC_SYNTHESIZE(int, h_ID, fID);                  //实体ID
	CC_SYNTHESIZE(int, h_iModelID, fModelID);       //资源ID
	CC_SYNTHESIZE(int, h_iPlayerCode, fPlayerCode); //玩家序号（用以区别敌人还是队友）
	CC_SYNTHESIZE(std::string, h_sName, fName);     //名字
	CC_SYNTHESIZE(int, h_iMaxHP, fMaxHP);           //最大HP
	CC_SYNTHESIZE(int, h_iCurHP, fCurHP);           //当前HP
	CC_SYNTHESIZE(int, h_iAR, fAR);                 //护甲
	CC_SYNTHESIZE(int, h_iMR, fMR);                 //魔抗
	CC_SYNTHESIZE(int, h_iSpeed, fSpeed);           //移动速度
	CC_SYNTHESIZE(int, h_iLevel, fLevel);           //等级
	CC_SYNTHESIZE(int, h_iAD, fAD);                 //攻击力
	CC_SYNTHESIZE(double, h_iAP, fAP);              //法强
	CC_SYNTHESIZE(double, h_iAS, fAS);              //攻速
	CC_SYNTHESIZE(int, h_iARG, fARG);               //攻击距离(表示周围几格)
	CC_SYNTHESIZE(double, h_iCRIT, fCRIT);          //暴击率
	CC_SYNTHESIZE(int, h_iInitMANA, fInitMANA);     //初始法力值
	CC_SYNTHESIZE(int, h_iCurMANA, fCurMANA);       //当前法力值
	CC_SYNTHESIZE(int, h_iMaxMANA, fMaxMANA);       //法力值上限
	CC_SYNTHESIZE(int, h_iCost, fCost);             //英雄花费
	CC_SYNTHESIZE(int, h_iSell, fSell);             //英雄售价
	CC_SYNTHESIZE(int, h_ATKMANA, fh_ATKMANA);       //普攻回蓝
	CC_SYNTHESIZE(bool, h_isDead, fh_isDead);        //标记是否死亡
	CC_SYNTHESIZE(bool, h_isDebuff, fh_isDebuff);    //能否被添加debuff
	CC_SYNTHESIZE(int, h_Debuff, fh_Debuff);         //负面状态种类(不同数字代表不同状态)
	CC_SYNTHESIZE(double, h_DebuffEffect, fh_DebuffEffect);  //负面效果数值
	CC_SYNTHESIZE(bool, h_onStage, fh_onStage);      //是否登场
	CC_SYNTHESIZE(bool, h_isSold, fh_isSold);        //是否出售
	CC_SYNTHESIZE(int, h_Shield, fh_Shield);         //护盾（没有为0，有则表示护盾值）
	CC_SYNTHESIZE(bool, h_isTargeted, fh_isTargeted);//能否被选中为目标，如果死亡则不能
	CC_SYNTHESIZE(bool, h_isMove, fh_isMove);        //能否移动

	//int h_Armed[3];                                 //英雄装备
	
};


/*场上的"经理"*/
class ManageHero
{
public:

private:
	friend Hero;
	Vector<Hero*> onStageHeroes;
	map<int,int> HeroRelation;
}Manager;

/**********************以下为各英雄类***********************/
class Fuajimier :public Hero
{
public:
	Fuajimier(int level);
	~Fuajimier();
	void onBindSprite();
	void UseSkill();
};

class Wolike :public Hero
{
public:
	Wolike(int level);
	~Wolike();
	void onBindSprite();
	void UseSkill();
};
//技能没想好怎么写
class VN :public Hero
{
public:
	VN(int level);
	~VN();
	void onBindSprite();
	void UseSkill();
};

class Bobi :public Hero
{
public:
	Bobi(int level);
	~Bobi();
	void onBindSprite();
	void UseSkill();
};
//技能持续时间
class UD :public Hero
{
public:
	UD(int level);
	~UD();
	void onBindSprite();
	void UseSkill();
};
//伤害减免
class Gulajiasi :public Hero
{
public:
	Gulajiasi(int level);
	~Gulajiasi();
	void onBindSprite();
	void UseSkill();
};

class Leiouna :public Hero
{
public:
	Leiouna(int level);
	~Leiouna();
	void onBindSprite();
	void UseSkill();
};

class Giggs :public Hero
{
public:
	Giggs(int level);
	~Giggs();
	void onBindSprite();
	void UseSkill();
};
//判断周围敌人
class Kazike:public Hero
{
public:
	Kazike(int level);
	~Kazike();
	void onBindSprite();
	void UseSkill();
};
//降低攻击力40%,8s
class Lisangzhuo :public Hero
{
public:
	Lisangzhuo(int level);
	~Lisangzhuo();
	void onBindSprite();
	void UseSkill();
};
//护盾消失后的攻速加成
class Kelie :public Hero
{
public:
	Kelie(int level);
	~Kelie();
	void onBindSprite();
	void UseSkill();//空，被动技能
};

class Yatuokesi :public Hero
{
public:
	Yatuokesi(int level);
	~Yatuokesi();
	void onBindSprite();
	void UseSkill();
};

class Kalisita :public Hero
{
public:
	Kalisita(int level);
	~Kalisita();
	void onBindSprite();
	void UseSkill();
};

class Lefulan :public Hero
{
public:
	Lefulan(int level);
	~Lefulan();
	void onBindSprite();
	void UseSkill();
};

class Suolaka :public Hero
{
	
public:
	Suolaka(int level);
	~Suolaka();
	void onBindSprite();
	void UseSkill();
};
/*没写*/
class Telangdeer :public Hero
{
public:
	Telangdeer(int level);
	~Telangdeer();
	void onBindSprite();
	void UseSkill();
};

class Bulande :public Hero
{
public:
	Bulande(int level);
	~Bulande();
	void onBindSprite();
	void UseSkill();
};

class Kainan :public Hero
{
public:
	Kainan(int level);
	~Kainan();
	void onBindSprite();
	void UseSkill();
};

class Weilusi:public Hero
{
public:
	Weilusi(int level);
	~Weilusi();
	void onBindSprite();
	void UseSkill();
};

class Nuotilesi :public Hero
{
public:
	Nuotilesi(int level);
	~Nuotilesi();
	void onBindSprite();
	void UseSkill();
};

class Weiketuo :public Hero
{
public:
	Weiketuo(int level);
	~Weiketuo();
	void onBindSprite();
	void UseSkill();
};

class Zhuangseni :public Hero
{
public:
	Zhuangseni(int level);
	~Zhuangseni();
	void onBindSprite();
	void UseSkill();
};

class Hekalimu :public Hero
{
public:
	Hekalimu(int level);
	~Hekalimu();
	void onBindSprite();
	void UseSkill();
};

class Xindela :public Hero
{
public:
	Xindela(int level);
	~Xindela();
	void onBindSprite();
	void UseSkill();
};

class Chuishi :public Hero
{
public:
	Chuishi(int level);
	~Chuishi();
	void onBindSprite();
	void UseSkill();
};

class Seti :public Hero
{
public:
	Seti(int level);
	~Seti();
	void onBindSprite();
	void UseSkill();
};

class Nunu :public Hero
{
public:
	Nunu(int level);
	~Nunu();
	void onBindSprite();
	void UseSkill();
};

class Ashe :public Hero
{
public:
	Ashe(int level);
	~Ashe();
	void onBindSprite();
	void UseSkill();
};

class Moganna :public Hero
{
public:
	Moganna(int level);
	~Moganna();
	void onBindSprite();
	void UseSkill();
};

class Katelinna :public Hero
{
public:
	Katelinna(int level);
	~Katelinna();
	void onBindSprite();
	void UseSkill();
};

class NOC :public Hero
{
public:
	NOC(int level);
	~NOC();
	void onBindSprite();
	void UseSkill();
};

class Lee :public Hero
{
public:
	Lee(int level);
	~Lee();
	void onBindSprite();
	void UseSkill();
};

class Naideli :public Hero
{
public:
	Naideli(int level);
	~Naideli();
	void onBindSprite();
	void UseSkill();
};

class Pansen :public Hero
{
public:
	Pansen(int level);
	~Pansen();
	void onBindSprite();
	void UseSkill();
};

class Ruiwen :public Hero
{
public:
	Ruiwen(int level);
	~Ruiwen();
	void onBindSprite();
	void UseSkill();
};

class Lux :public Hero
{
public:
	Lux(int level);
	~Lux();
	void onBindSprite();
	void UseSkill();
};

class Lulu:public Hero
{
public:
	Lulu(int level);
	~Lulu();
	void onBindSprite();
	void UseSkill();
};

class Jiela:public Hero
{
public:
	Jiela(int level);
	~Jiela();
	void onBindSprite();
	void UseSkill();
};

class Yasuo :public Hero
{
public:
	Yasuo(int level);
	~Yasuo();
	void onBindSprite();
	void UseSkill();
};